package configuration;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class MvcConfiguration extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class[] { MyConfig.class };
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] { "/" };
	}

}

----------------------

package configuration;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("configuration,controller,service,entity,repository")
public class MyConfig {

}
-----------------------

package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import entity.User;
import service.CrudService;

@Controller
public class CrudController {

	@Autowired
	CrudService service;

	@GetMapping("/")
	public String loadMain() {
		return "home.jsp";
	}

	@GetMapping("/create")
	public String loadCreate() {
		return "add.jsp";
	}

	@PostMapping("/create")
	public String create(@ModelAttribute User user,Model model) {
		return service.save(user,model);
	}

	@GetMapping("/read")
	public String loadFetch() {
		return "fetch.jsp";
	}

	@PostMapping("/read")
	public String fetchById(@RequestParam int id,Model model) {
		return service.findById(id,model);
	}

	@GetMapping("/delete")
	public String loadDelete() {
		return "delete.jsp";
	}

	@PostMapping("/delete")
	public String deleteById(@RequestParam int id,Model model) {
		return service.deleteById(id,model);
	}

	@GetMapping("/update")
	public String loadUpdate() {
		return "update.jsp";
	}

	@PostMapping("/update")
	public String update(@ModelAttribute User user,Model model) {
		return service.update(user,model);
	}

}
--------------------
package entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;

@Entity
public class User {
	@Id
	@GeneratedValue
	private int id;
	@Column(nullable = false)
	private String name;
	@Column(unique = true, nullable = false)
	private String email;
	@Column(unique = true, nullable = false)
	private long mobile;
	@Column(nullable = false)
	private int age;
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public long getMobile() {
		return mobile;
	}
	public void setMobile(long mobile) {
		this.mobile = mobile;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "User [id=" + id + ", " + (name != null ? "name=" + name + ", " : "")
				+ (email != null ? "email=" + email + ", " : "") + "mobile=" + mobile + ", age=" + age + "]";
	}
	
	
	
}
---------------------
package repository;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

import org.springframework.stereotype.Repository;

import entity.User;

@Repository
public class CrudRepository {

	EntityManagerFactory factory = Persistence.createEntityManagerFactory("crud");
	EntityManager manager = factory.createEntityManager();
	EntityTransaction transaction = manager.getTransaction();

	public boolean save(User user) {
		try {
			transaction.begin();
			manager.persist(user);
			transaction.commit();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public User findById(int id) {
		return manager.find(User.class, id);
	}

	public boolean update(User user) {
		try {
			transaction.begin();
			manager.merge(user);
			transaction.commit();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public boolean delete(int id) {
		try {
			transaction.begin();
			manager.remove(findById(id));
			transaction.commit();
			return true;
		} catch (Exception e) {
			transaction.commit();
			return false;
		}
	}
}
--------------------------
package service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import entity.User;
import repository.CrudRepository;

@Service
public class CrudService {

	@Autowired
	CrudRepository repository;

	public String save(User user, Model model) {
		boolean status = repository.save(user);
		if (status) {
			model.addAttribute("success", "Data Saved Success");
		} else {
			model.addAttribute("failure", "Data Failed to Save");
		}
		return "home.jsp";
	}

	public String findById(int id, Model model) {
		User user = repository.findById(id);
		if (user == null) {
			model.addAttribute("failure", "No record found with id : " + id);
			return "home.jsp";
		} else {
			model.addAttribute("user", user);
			return "display.jsp";
		}
	}

	public String update(User user, Model model) {
		boolean status = repository.update(user);
		if (status) {
			model.addAttribute("success", "Updated Success");
		} else {
			model.addAttribute("failure", "Failed to Update");
		}
		return "home.jsp";
	}

	public String deleteById(int id, Model model) {
		boolean status = repository.delete(id);
		if (status) {
			model.addAttribute("success", "Deleted Success");
		} else {
			model.addAttribute("failure", "Not able to delete");
		}
		return "home.jsp";
	}
}
-----------------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Add</title>
</head>
<body>
	<div align="center">
		<h1>Add Record</h1>

		<form action="/crud/create" method="post">
			Name: <input type="text" name="name"><br>
			<br> Email: <input type="email" name="email"><br>
			<br> Mobile: <input type="number" name="mobile"><br>
			<br> Age: <input type="number" name="age"><br>
			<br>
			<button>Add</button>
		</form>
		<br> <a href="/crud"><button>Back</button></a>
	</div>
</body>
</html>
-----------------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Delete Record</title>
</head>
<body>
	<div align="center">
		<h1>Delete Record By Id</h1>
		
		<form action="/crud/delete" method="post">
			Enter Id: <input type="text" name="id">
			<button>Delete</button>
		</form>
		<br> <a href="/crud"><button>Back</button></a>
	</div>
</body>
</html>
--------------------
<%@ page isELIgnored="false" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Display</title>
</head>
<body>
	<div align="center">
		<h1>Display Record</h1>
		<h1>Name: ${user.name}</h1>
		<h1>Email: ${user.email}</h1>
		<h1>Mobile: ${user.mobile }</h1>
		<h1>Age: ${user.age}</h1>

		<a href="/crud"><button>Back</button> </a>
	</div>
</body>
</html>
------------------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Fetch Record</title>
</head>
<body>
	<div align="center">
		<h1>Fetch Record By Id</h1>
		
		<form action="/crud/read" method="post">
			Enter Id: <input type="text" name="id">
			<button>Search</button>
		</form>
		<br> <a href="/crud"><button>Back</button></a>
	</div>
</body>
</html>
-----------------------
<%@ page isELIgnored="false" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Home</title>
</head>
<body>
	<div align="center">
		<h1>Crud using MVC</h1>
		<h3 style="color: green">${success}</h3>
		<h3 style="color: red">${failure}</h3>
		<a href="/crud/create"><button>Create</button></a><br> <br>
		<a href="/crud/read"><button>Read</button></a><br> <br> <a
			href="/crud/update"><button>Update</button></a><br> <br> <a
			href="/crud/delete"><button>Delete</button></a><br> <br>
	</div>
</body>
</html>
--------------------------
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Update</title>
</head>
<body>
	<div align="center">
		<h1>Update Record</h1>

		<form action="/crud/update" method="post">
			Id: <input type="text" name="id"><br>
			<br> Name: <input type="text" name="name"><br> <br>
			Email: <input type="email" name="email"><br> <br>
			Mobile: <input type="number" name="mobile"><br> <br>
			Age: <input type="number" name="age"><br> <br>
			<button>Update</button>
		</form>
		<br> <a href="/crud"><button>Back</button></a>
	</div>
</body>
</html>